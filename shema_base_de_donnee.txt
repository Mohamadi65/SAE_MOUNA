CREATE TABLE IF NOT EXISTS public.departement
(
    id_dept integer PRIMARY KEY,
    nom_dept character varying(50) NOT NULL UNIQUE
) ;


CREATE TABLE IF NOT EXISTS public.utilisateur
(
    id integer NOT NULL,
	nom character varying(50) NOT NULL,
	prenom character varying(50) NOT NULL,
    login character varying(50) NOT NULL UNIQUE,
    mdp character varying(50) NOT NULL UNIQUE,
    id_dept integer,
	CONSTRAINT long_mdp CHECK (char_length(mdp) >= 8),
    CONSTRAINT unique_constraint PRIMARY KEY (id) ,
	CONSTRAINT id_dept_pk FOREIGN KEY (id_dept) REFERENCES departement(id_dept)
)



TABLESPACE pg_default;

ALTER TABLE public.utilisateur
    OWNER to postgres;

ALTER TABLE public.departement
    OWNER to postgres;


    utilisateurs = [    {        "id": 1,        "nom": "Doe",        "prenom": "John",        "login": "johndoe",        "mdp": "password123",        "id_dept": 10    },    {        "id": 2,        "nom": "Smith",        "prenom": "Jane",        "login": "janesmith",        "mdp": "qwertyuiop",        "id_dept": 20    }]
    print((database[0]["nom_champ"]))
    print(database[0]["contrainte"][0])
     print(database[4]["contrainte"]["check"]["minimum"])

     import pandas as pd

# Charger le fichier dans un DataFrame
df = pd.read_csv('fic.csv')

# Afficher le DataFrame avant la modification
print(df)

# Modifier la valeur de la colonne 'Age' à l'indice 0
df.at[0, 'Age'] = 25

# Enregistrer les modifications dans le fichier
df.to_csv('fic.csv', index=False)

# Afficher le DataFrame après la modification
print(df)

if not valeur.is_integer():
